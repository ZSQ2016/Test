<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
                        
    <!-- 使用注解式注入 -->
	<context:annotation-config />
	
    <!-- 自动扫描  设置需要注解的类所在的包 -->
	<context:component-scan base-package="com.chillax" />
	
    
	<!--DAO的配置     DAO接口所在包名，Spring会采用自动扫描方式创建mapper bean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<!--basePackage指定要扫描的包，在此包之下的映射器都会被搜索到。
		 可指定多个包，包与包之间用逗号或分号分隔-->
		 <!-- basePackage：扫描器开始扫描的基础包名，支持嵌套扫描； -->
		 <!-- sqlSessionTemplateBeanName：前文提到的模板bean的名称； -->
		 <!-- markerInterface：基于接口的过滤器，实现了该接口的dao才会被扫描器扫描，与basePackage是与的作用。 -->
		 <!-- annotationClass：配置了该注解的dao才会被扫描器扫描，与basePackage是与的作用。 -->
		<property name="basePackage" value="com.chillax.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>       
	
	<!-- 导入数据库配置 -->
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>
	<!-- 使用jdbc.properties中的参数 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<!-- SqlSessionFactoryBean是一个工厂bean，它的作用就是解析配置（数据源、别名等）。 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--mapperLocations 属性使用一个资源位置的 list。 这个属性可以用来指定 MyBatis 的 XML 映射器文件的位置 -->
		<property name="mapperLocations" value="classpath:com/chillax/mapper/*.xml"></property>
	</bean>
	
	<!-- 导入数据库事务管理配置 -->
	<import resource="spring-tx.xml"/>
	
</beans>
11111111111111111111
222222222222222222222222